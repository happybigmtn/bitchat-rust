name: Security Scanning

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - container
      create_issues:
        description: 'Create GitHub issues for findings'
        required: false
        default: 'false'
        type: boolean

jobs:
  # Comprehensive dependency vulnerability scanning
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        key: security-deps
    
    - name: Install security tools
      run: |
        cargo install cargo-audit cargo-deny --locked
    
    - name: Run cargo-audit (vulnerabilities)
      run: |
        cargo audit --json > audit-results.json || true
        cargo audit || echo "Vulnerabilities found"
    
    - name: Run cargo-deny (comprehensive checks)
      run: |
        # Create deny.toml if not exists
        if [ ! -f deny.toml ]; then
          cat > deny.toml << EOF
        [graph]
        all-features = true
        
        [advisories]
        db-path = "~/.cargo/advisory-db"
        db-urls = ["https://github.com/rustsec/advisory-db"]
        vulnerability = "deny"
        unmaintained = "warn"
        unsound = "deny"
        
        [licenses]
        unlicensed = "deny"
        allow = [
          "MIT",
          "Apache-2.0",
          "Apache-2.0 WITH LLVM-exception",
          "BSD-2-Clause",
          "BSD-3-Clause",
          "ISC",
          "Unicode-DFS-2016",
        ]
        
        [bans]
        multiple-versions = "warn"
        wildcards = "deny"
        
        [sources]
        unknown-registry = "deny"
        unknown-git = "deny"
        EOF
        fi
        
        cargo deny --format json check > deny-results.json || true
        cargo deny check || echo "Policy violations found"
    
    - name: Check for known malicious packages
      run: |
        # Check against known malicious package patterns
        cargo tree --format "{p}" | grep -E "(typosquatting|malware|backdoor)" || echo "No obvious malicious packages detected"
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          audit-results.json
          deny-results.json
        retention-days: 30

  # Comprehensive Static Application Security Testing (SAST)
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        key: security-sast
    
    - name: Install SAST tools
      run: |
        cargo install cargo-geiger cargo-careful --locked
        python3 -m pip install semgrep bandit safety
    
    - name: Run unsafe code analysis
      run: |
        echo "## Unsafe Code Analysis" > sast-report.md
        cargo geiger --format GitHubMarkdown >> sast-report.md || true
        
        # Count unsafe usage
        UNSAFE_COUNT=$(cargo geiger --format json 2>/dev/null | jq '.unsafeCounter.total' || echo "0")
        echo "Total unsafe usage: $UNSAFE_COUNT" >> sast-report.md
    
    - name: Run careful analysis (if nightly available)
      continue-on-error: true
      run: |
        rustup toolchain install nightly
        cargo +nightly careful test --no-run 2>&1 | tee careful-results.txt || true
    
    - name: Run semgrep security analysis
      run: |
        echo "\n## Semgrep Security Analysis" >> sast-report.md
        
        # Run comprehensive security rules
        semgrep --config=p/security-audit \
                 --config=p/rust \
                 --config=p/secrets \
                 --json --output=semgrep-results.json \
                 --metrics=off . || true
        
        # Convert to markdown summary
        python3 -c "
        import json
        try:
            with open('semgrep-results.json', 'r') as f:
                results = json.load(f)
            
            findings = results.get('results', [])
            print(f'Found {len(findings)} security issues:')
            
            for finding in findings[:10]:  # Top 10
                severity = finding.get('extra', {}).get('severity', 'INFO')
                message = finding.get('extra', {}).get('message', 'No message')
                path = finding.get('path', 'Unknown')
                line = finding.get('start', {}).get('line', '?')
                
                print(f'- **{severity}**: {message} ({path}:{line})')
        except Exception as e:
            print(f'Error processing semgrep results: {e}')
        " >> sast-report.md
    
    - name: Run CodeQL analysis
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      uses: github/codeql-action/analyze@v3
      with:
        languages: cpp  # For any C/C++ dependencies
        queries: security-and-quality
      continue-on-error: true
    
    - name: Security pattern analysis
      run: |
        echo "\n## Security Pattern Analysis" >> sast-report.md
        
        # Check for common security anti-patterns
        echo "### Potential Issues Found:" >> sast-report.md
        
        # Hardcoded secrets patterns
        if grep -r "password.*=" --include="*.rs" .; then
          echo "- Potential hardcoded passwords found" >> sast-report.md
        fi
        
        # Unsafe networking
        if grep -r "http://" --include="*.rs" .; then
          echo "- HTTP (unencrypted) URLs found" >> sast-report.md
        fi
        
        # Insecure random usage
        if grep -r "thread_rng\|fastrand" --include="*.rs" .; then
          echo "- Non-cryptographic random number usage detected" >> sast-report.md
        fi
        
        # Potential SQL injection
        if grep -r "format!.*SELECT\|format!.*INSERT\|format!.*UPDATE" --include="*.rs" .; then
          echo "- Potential SQL injection vulnerabilities" >> sast-report.md
        fi
    
    - name: Upload SAST results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sast-results
        path: |
          sast-report.md
          semgrep-results.json
          careful-results.txt
        retention-days: 30

  # Comprehensive license compliance
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install license tools
      run: |
        cargo install cargo-license cargo-deny --locked
    
    - name: Analyze project licenses
      run: |
        echo "# License Compliance Report" > license-report.md
        echo "" >> license-report.md
        echo "Generated on: $(date)" >> license-report.md
        echo "" >> license-report.md
        
        # Get all licenses
        cargo license --json > licenses.json
        
        # Summary statistics
        TOTAL_DEPS=$(jq length licenses.json)
        UNIQUE_LICENSES=$(jq -r '.[].license' licenses.json | sort | uniq | wc -l)
        
        echo "## Summary" >> license-report.md
        echo "- Total dependencies: $TOTAL_DEPS" >> license-report.md
        echo "- Unique licenses: $UNIQUE_LICENSES" >> license-report.md
        echo "" >> license-report.md
        
        # License breakdown
        echo "## License Breakdown" >> license-report.md
        jq -r '.[].license' licenses.json | sort | uniq -c | sort -rn | while read count license; do
          echo "- $license: $count dependencies" >> license-report.md
        done
        echo "" >> license-report.md
    
    - name: License compatibility check
      run: |
        echo "## Compatibility Analysis" >> license-report.md
        
        # Define license categories
        PERMISSIVE=("MIT" "Apache-2.0" "BSD-2-Clause" "BSD-3-Clause" "ISC" "Unlicense")
        COPYLEFT=("GPL-2.0" "GPL-3.0" "LGPL-2.1" "LGPL-3.0" "AGPL-3.0")
        COMMERCIAL_UNFRIENDLY=("GPL-3.0" "AGPL-3.0" "SSPL-1.0")
        
        # Check for problematic licenses
        ISSUES_FOUND=0
        
        for license in $(jq -r '.[].license' licenses.json | sort | uniq); do
          case "$license" in
            "GPL-3.0"|"AGPL-3.0"|"SSPL-1.0")
              echo "- ❌ **$license**: Potentially incompatible with commercial use" >> license-report.md
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
              ;;
            "GPL-2.0"|"LGPL-"*)
              echo "- ⚠️ **$license**: Copyleft license - review required" >> license-report.md
              ;;
            "Unknown")
              echo "- ⚠️ **$license**: License unknown - manual review required" >> license-report.md
              ;;
            "MIT"|"Apache-2.0"|"BSD-"*|"ISC")
              echo "- ✓ **$license**: Permissive license" >> license-report.md
              ;;
            *)
              echo "- ❔ **$license**: Non-standard license - review recommended" >> license-report.md
              ;;
          esac
        done
        
        if [ $ISSUES_FOUND -gt 0 ]; then
          echo "" >> license-report.md
          echo "**Warning**: Found $ISSUES_FOUND potentially problematic licenses!" >> license-report.md
          exit 1
        else
          echo "" >> license-report.md
          echo "**Status**: All licenses appear compatible" >> license-report.md
        fi
    
    - name: Generate license attribution
      run: |
        echo "" >> license-report.md
        echo "## Third-Party Licenses" >> license-report.md
        echo "" >> license-report.md
        echo "This software includes the following third-party components:" >> license-report.md
        echo "" >> license-report.md
        
        jq -r '.[] | "### \(.name) v\(.version)\n\n**License**: \(.license)\n**Repository**: \(.repository // "N/A")\n\n"' licenses.json >> license-report.md
        
        # Create ATTRIBUTION.md file
        echo "# Third-Party Software Attribution" > ATTRIBUTION.md
        echo "" >> ATTRIBUTION.md
        echo "This document lists all third-party software included in BitCraps and their respective licenses." >> ATTRIBUTION.md
        echo "" >> ATTRIBUTION.md
        
        jq -r '.[] | "## \(.name) v\(.version)\n\n- **License**: \(.license)\n- **Repository**: \(.repository // "N/A")\n- **Description**: \(.description // "N/A")\n"' licenses.json >> ATTRIBUTION.md
    
    - name: Upload license compliance results
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-results
        path: |
          license-report.md
          licenses.json
          ATTRIBUTION.md
        retention-days: 90

  # Comprehensive cryptography audit
  cryptography-audit:
    name: Cryptography Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Comprehensive cryptographic analysis
      run: |
        echo "# Cryptography Audit Report" > crypto-report.md
        echo "" >> crypto-report.md
        echo "Generated on: $(date)" >> crypto-report.md
        echo "" >> crypto-report.md
        
        echo "## Cryptographic Implementation Analysis" >> crypto-report.md
        echo "" >> crypto-report.md
        
        # Check for weak algorithms
        echo "### Weak Algorithm Detection" >> crypto-report.md
        WEAK_FOUND=0
        
        if grep -r -i "md4\|md5" --include="*.rs" .; then
          echo "- ❌ **MD4/MD5**: Cryptographically broken hash functions detected" >> crypto-report.md
          WEAK_FOUND=$((WEAK_FOUND + 1))
        fi
        
        if grep -r -i "sha1" --include="*.rs" .; then
          echo "- ❌ **SHA-1**: Deprecated hash function detected" >> crypto-report.md
          WEAK_FOUND=$((WEAK_FOUND + 1))
        fi
        
        if grep -r -i "\bdes\b\|3des" --include="*.rs" .; then
          echo "- ❌ **DES/3DES**: Weak encryption algorithms detected" >> crypto-report.md
          WEAK_FOUND=$((WEAK_FOUND + 1))
        fi
        
        if grep -r -i "rc4\|rc2" --include="*.rs" .; then
          echo "- ❌ **RC4/RC2**: Broken stream ciphers detected" >> crypto-report.md
          WEAK_FOUND=$((WEAK_FOUND + 1))
        fi
        
        if [ $WEAK_FOUND -eq 0 ]; then
          echo "- ✓ No weak cryptographic algorithms detected" >> crypto-report.md
        fi
        
        echo "" >> crypto-report.md
        
        # Check random number generation
        echo "### Random Number Generation" >> crypto-report.md
        
        if grep -r "OsRng" --include="*.rs" .; then
          echo "- ✓ **OsRng**: Cryptographically secure RNG found" >> crypto-report.md
        else
          echo "- ⚠️ **OsRng**: No cryptographically secure RNG detected" >> crypto-report.md
        fi
        
        if grep -r "thread_rng" --include="*.rs" .; then
          echo "- ⚠️ **thread_rng**: Non-cryptographic RNG detected - review usage" >> crypto-report.md
        fi
        
        if grep -r "fastrand\|rand::random" --include="*.rs" .; then
          echo "- ⚠️ **Fast RNG**: Non-cryptographic RNG detected - ensure not used for crypto" >> crypto-report.md
        fi
        
        echo "" >> crypto-report.md
        
        # Check encryption algorithms
        echo "### Encryption Algorithms" >> crypto-report.md
        
        if grep -r "AES" --include="*.rs" .; then
          echo "- ✓ **AES**: Strong symmetric encryption detected" >> crypto-report.md
        fi
        
        if grep -r "ChaCha20" --include="*.rs" .; then
          echo "- ✓ **ChaCha20**: Strong stream cipher detected" >> crypto-report.md
        fi
        
        if grep -r "RSA" --include="*.rs" .; then
          echo "- ✓ **RSA**: Asymmetric encryption detected" >> crypto-report.md
          
          # Check for proper key sizes
          if grep -r "1024" --include="*.rs" . | grep -i rsa; then
            echo "  - ⚠️ Warning: 1024-bit RSA keys may be weak" >> crypto-report.md
          fi
        fi
        
        if grep -r "Ed25519\|X25519" --include="*.rs" .; then
          echo "- ✓ **Ed25519/X25519**: Modern elliptic curve cryptography detected" >> crypto-report.md
        fi
        
        echo "" >> crypto-report.md
        
        # Check hashing algorithms
        echo "### Hash Functions" >> crypto-report.md
        
        if grep -r "SHA-256\|SHA256\|Sha256" --include="*.rs" .; then
          echo "- ✓ **SHA-256**: Strong hash function detected" >> crypto-report.md
        fi
        
        if grep -r "SHA-512\|SHA512\|Sha512" --include="*.rs" .; then
          echo "- ✓ **SHA-512**: Strong hash function detected" >> crypto-report.md
        fi
        
        if grep -r "Blake3\|BLAKE3" --include="*.rs" .; then
          echo "- ✓ **BLAKE3**: Modern hash function detected" >> crypto-report.md
        fi
        
        if grep -r "Blake2\|BLAKE2" --include="*.rs" .; then
          echo "- ✓ **BLAKE2**: Strong hash function detected" >> crypto-report.md
        fi
        
        echo "" >> crypto-report.md
        
        # Check for password handling
        echo "### Password and Secret Handling" >> crypto-report.md
        
        if grep -r "bcrypt\|scrypt\|argon2" --include="*.rs" .; then
          echo "- ✓ **Key Derivation**: Proper password hashing detected" >> crypto-report.md
        else
          echo "- ⚠️ **Key Derivation**: No password hashing functions detected" >> crypto-report.md
        fi
        
        if grep -r "zeroize" --include="*.rs" .; then
          echo "- ✓ **Memory Clearing**: Sensitive data clearing detected" >> crypto-report.md
        else
          echo "- ⚠️ **Memory Clearing**: No memory zeroing detected" >> crypto-report.md
        fi
        
        if grep -r "SecretString\|Secret<" --include="*.rs" .; then
          echo "- ✓ **Secret Types**: Protected secret types detected" >> crypto-report.md
        fi
        
        echo "" >> crypto-report.md
        
        # Protocol analysis
        echo "### Protocol Security" >> crypto-report.md
        
        if grep -r "TLS\|SSL" --include="*.rs" .; then
          echo "- ✓ **TLS/SSL**: Transport security detected" >> crypto-report.md
        fi
        
        if grep -r "HMAC" --include="*.rs" .; then
          echo "- ✓ **HMAC**: Message authentication detected" >> crypto-report.md
        fi
        
        if grep -r "digital_signature\|signature" --include="*.rs" .; then
          echo "- ✓ **Digital Signatures**: Message signing detected" >> crypto-report.md
        fi
        
        echo "" >> crypto-report.md
        
        # Common vulnerabilities
        echo "### Potential Vulnerabilities" >> crypto-report.md
        
        if grep -r "password.*=.*\"" --include="*.rs" .; then
          echo "- ❌ **Hardcoded Passwords**: Potential hardcoded passwords detected" >> crypto-report.md
        fi
        
        if grep -r "private_key.*=.*\"" --include="*.rs" .; then
          echo "- ❌ **Hardcoded Keys**: Potential hardcoded private keys detected" >> crypto-report.md
        fi
        
        if grep -r "ECB" --include="*.rs" .; then
          echo "- ❌ **ECB Mode**: Insecure block cipher mode detected" >> crypto-report.md
        fi
        
        if grep -r "unsafe.*crypto\|crypto.*unsafe" --include="*.rs" .; then
          echo "- ⚠️ **Unsafe Crypto**: Unsafe code in cryptographic context" >> crypto-report.md
        fi
    
    - name: Upload cryptography audit results
      uses: actions/upload-artifact@v4
      with:
        name: cryptography-audit-results
        path: crypto-report.md
        retention-days: 90

  # Comprehensive secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    - name: TruffleHog OSS (Verified secrets)
      id: trufflehog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified --json
      continue-on-error: true
    
    - name: GitLeaks secret scanning
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true
    
    - name: Custom secret patterns
      run: |
        echo "## Custom Secret Pattern Analysis" > secret-report.md
        
        # Check for common secret patterns
        SECRET_PATTERNS=(
          "password\s*=\s*['\"][^'\"\s]{8,}['\"]"
          "api_key\s*=\s*['\"][^'\"\s]{20,}['\"]"
          "secret\s*=\s*['\"][^'\"\s]{16,}['\"]"
          "token\s*=\s*['\"][^'\"\s]{20,}['\"]"
          "private_key\s*=\s*['\"][^'\"\s]{32,}['\"]"
          "-----BEGIN.*PRIVATE KEY-----"
          "sk_live_[a-zA-Z0-9]{24,}"
          "pk_live_[a-zA-Z0-9]{24,}"
          "rk_live_[a-zA-Z0-9]{24,}"
        )
        
        FOUND_SECRETS=0
        for pattern in "${SECRET_PATTERNS[@]}"; do
          if grep -r -E "$pattern" --include="*.rs" --include="*.toml" --include="*.json" --include="*.yaml" --include="*.yml" .; then
            echo "Warning: Potential secret pattern found: $pattern" >> secret-report.md
            FOUND_SECRETS=$((FOUND_SECRETS + 1))
          fi
        done
        
        if [ $FOUND_SECRETS -eq 0 ]; then
          echo "No custom secret patterns detected." >> secret-report.md
        else
          echo "Found $FOUND_SECRETS potential secret patterns!" >> secret-report.md
          echo "Please review and ensure these are not actual secrets." >> secret-report.md
        fi
    
    - name: Environment variable validation
      run: |
        echo "\n## Environment Variable Security Check" >> secret-report.md
        
        # Check for potential sensitive env vars in code
        if grep -r "env::var.*PASSWORD\|env::var.*SECRET\|env::var.*TOKEN\|env::var.*KEY" --include="*.rs" .; then
          echo "Warning: Code references sensitive environment variables" >> secret-report.md
          echo "Ensure these are properly handled and not logged" >> secret-report.md
        else
          echo "No obvious sensitive environment variable usage found" >> secret-report.md
        fi
    
    - name: Upload secret scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-results
        path: |
          secret-report.md
          results.json
        retention-days: 30

  # Comprehensive container security scanning
  container-scan:
    name: Container Security
    runs-on: ubuntu-latest
    if: (github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == '') && hashFiles('Dockerfile') != ''
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Build Docker image for scanning
      run: |
        docker build -t bitcraps:scan-target .
    
    - name: Run Trivy vulnerability scanner (High/Critical)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bitcraps:scan-target'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'
    
    - name: Run Trivy configuration scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config.sarif'
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs.sarif'
        severity: 'HIGH,CRITICAL'
    
    - name: Run Docker Bench Security
      run: |
        docker run --rm -it \
          --pid host \
          --userns host \
          --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=\$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /etc/systemd:/etc/systemd:ro \
          docker/docker-bench-security > docker-bench-results.txt || true
    
    - name: Container hardening analysis
      run: |
        echo "## Container Security Analysis" > container-report.md
        
        # Analyze Dockerfile for security issues
        if [ -f Dockerfile ]; then
          echo "### Dockerfile Security Issues:" >> container-report.md
          
          # Check for root user
          if ! grep -q "USER" Dockerfile; then
            echo "- Warning: Container runs as root (no USER directive)" >> container-report.md
          fi
          
          # Check for latest tags
          if grep -q ":latest" Dockerfile; then
            echo "- Warning: Uses 'latest' tags (not pinned versions)" >> container-report.md
          fi
          
          # Check for secrets in environment
          if grep -E "ENV.*SECRET|ENV.*PASSWORD|ENV.*TOKEN" Dockerfile; then
            echo "- Critical: Potential secrets in environment variables" >> container-report.md
          fi
          
          # Check for package manager cache
          if ! grep -q "rm -rf /var/lib/apt/lists" Dockerfile; then
            echo "- Info: Package manager cache not cleaned" >> container-report.md
          fi
        fi
        
        echo "\n### Container Image Analysis:" >> container-report.md
        docker image inspect bitcraps:scan-target --format '{{json .}}' > image-info.json
        
        # Extract security-relevant information
        python3 -c "
        import json
        with open('image-info.json', 'r') as f:
            info = json.load(f)[0]
        
        config = info.get('Config', {})
        user = config.get('User', 'root')
        print(f'- Running user: {user}')
        
        if user == 'root' or user == '0' or user == '':
            print('- Warning: Container runs as root')
        
        exposed_ports = config.get('ExposedPorts', {})
        if exposed_ports:
            print(f'- Exposed ports: {list(exposed_ports.keys())}')
        
        env_vars = config.get('Env', [])
        sensitive_env = [env for env in env_vars if any(x in env.upper() for x in ['SECRET', 'PASSWORD', 'TOKEN', 'KEY'])]
        if sensitive_env:
            print(f'- Warning: Sensitive environment variables detected')
        " >> container-report.md
    
    - name: Upload container scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-results
        path: |
          trivy-*.sarif
          docker-bench-results.txt
          container-report.md
          image-info.json
        retention-days: 30
    
    - name: Upload Trivy results to GitHub Security
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Supply chain security
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Comprehensive security scorecard and compliance
  security-scorecard:
    name: Security Scorecard & Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' || github.event_name == 'schedule'
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0
    
    - name: Run OSSF Scorecard
      uses: ossf/scorecard-action@v2
      with:
        results_file: scorecard-results.sarif
        results_format: sarif
        publish_results: true
    
    - name: Generate security compliance report
      run: |
        echo "# BitCraps Security Compliance Report" > compliance-report.md
        echo "Generated on: $(date)" >> compliance-report.md
        echo "" >> compliance-report.md
        
        # Security practices checklist
        echo "## Security Practices Checklist" >> compliance-report.md
        echo "" >> compliance-report.md
        
        # CI/CD Security
        echo "### CI/CD Security" >> compliance-report.md
        if [ -f .github/workflows/security.yml ]; then
          echo "- ✓ Automated security scanning enabled" >> compliance-report.md
        else
          echo "- ❌ No security workflow found" >> compliance-report.md
        fi
        
        # Dependency management
        if [ -f Cargo.lock ]; then
          echo "- ✓ Dependency lock file present" >> compliance-report.md
        else
          echo "- ❌ No dependency lock file" >> compliance-report.md
        fi
        
        # Security documentation
        if [ -f SECURITY.md ]; then
          echo "- ✓ Security policy documented" >> compliance-report.md
        else
          echo "- ⚠️ No security policy found" >> compliance-report.md
        fi
        
        # Contribution guidelines
        if [ -f CONTRIBUTING.md ]; then
          echo "- ✓ Contribution guidelines present" >> compliance-report.md
        else
          echo "- ⚠️ No contribution guidelines" >> compliance-report.md
        fi
        
        # Code of conduct
        if [ -f CODE_OF_CONDUCT.md ]; then
          echo "- ✓ Code of conduct present" >> compliance-report.md
        else
          echo "- ⚠️ No code of conduct" >> compliance-report.md
        fi
        
        echo "" >> compliance-report.md
        echo "### Repository Security Features" >> compliance-report.md
        
        # Branch protection (would need API call to check)
        echo "- Branch protection: Manual verification required" >> compliance-report.md
        echo "- Required status checks: Manual verification required" >> compliance-report.md
        echo "- Signed commits: Manual verification required" >> compliance-report.md
        
        echo "" >> compliance-report.md
        echo "### Code Quality Metrics" >> compliance-report.md
        
        # Count various security-related patterns
        UNSAFE_COUNT=$(find . -name "*.rs" -exec grep -l "unsafe" {} \; | wc -l)
        TODO_COUNT=$(find . -name "*.rs" -exec grep -c "TODO\|FIXME" {} \; | awk '{sum += $1} END {print sum}')
        
        echo "- Files with unsafe code: $UNSAFE_COUNT" >> compliance-report.md
        echo "- Outstanding TODOs/FIXMEs: $TODO_COUNT" >> compliance-report.md
        
        # Dependency counts
        if [ -f Cargo.toml ]; then
          DEPS=$(grep "^[a-zA-Z]" Cargo.toml | grep "=" | wc -l)
          echo "- Direct dependencies: $DEPS" >> compliance-report.md
        fi
    
    - name: Security recommendations
      run: |
        echo "" >> compliance-report.md
        echo "## Security Recommendations" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "### Immediate Actions" >> compliance-report.md
        echo "1. Enable branch protection rules" >> compliance-report.md
        echo "2. Require signed commits" >> compliance-report.md
        echo "3. Enable automatic security updates" >> compliance-report.md
        echo "4. Set up vulnerability alerts" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "### Ongoing Practices" >> compliance-report.md
        echo "1. Regular dependency updates" >> compliance-report.md
        echo "2. Security code reviews" >> compliance-report.md
        echo "3. Penetration testing" >> compliance-report.md
        echo "4. Security training for contributors" >> compliance-report.md
    
    - name: Upload security scorecard results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scorecard-results
        path: |
          scorecard-results.sarif
          compliance-report.md
        retention-days: 90
    
    - name: Upload to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: scorecard-results.sarif
      continue-on-error: true

  # Security summary and issue creation
  security-summary:
    name: Security Summary
    needs: [dependency-check, sast, secret-scan, container-scan, security-scorecard]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-results
    
    - name: Generate comprehensive security report
      run: |
        echo "# 🔒 BitCraps Security Scan Summary" > SECURITY_SUMMARY.md
        echo "" >> SECURITY_SUMMARY.md
        echo "**Scan Date:** $(date)" >> SECURITY_SUMMARY.md
        echo "**Repository:** ${{ github.repository }}" >> SECURITY_SUMMARY.md
        echo "**Branch:** ${{ github.ref_name }}" >> SECURITY_SUMMARY.md
        echo "**Commit:** ${{ github.sha }}" >> SECURITY_SUMMARY.md
        echo "" >> SECURITY_SUMMARY.md
        
        # Job status summary
        echo "## 📊 Scan Results" >> SECURITY_SUMMARY.md
        echo "| Component | Status | Result |" >> SECURITY_SUMMARY.md
        echo "|-----------|--------|--------|" >> SECURITY_SUMMARY.md
        echo "| Dependency Check | ${{ needs.dependency-check.result }} | Vulnerability scanning |" >> SECURITY_SUMMARY.md
        echo "| SAST Analysis | ${{ needs.sast.result }} | Static code analysis |" >> SECURITY_SUMMARY.md
        echo "| Secret Scanning | ${{ needs.secret-scan.result }} | Credential detection |" >> SECURITY_SUMMARY.md
        echo "| Container Security | ${{ needs.container-scan.result }} | Docker image scanning |" >> SECURITY_SUMMARY.md
        echo "| Security Scorecard | ${{ needs.security-scorecard.result }} | OSSF compliance |" >> SECURITY_SUMMARY.md
        echo "" >> SECURITY_SUMMARY.md
        
        # Count findings
        TOTAL_ISSUES=0
        CRITICAL_ISSUES=0
        
        # Process available reports
        find security-results -name "*.md" -type f | while read -r report; do
          echo "Including findings from: $report" >&2
          cat "$report" >> SECURITY_SUMMARY.md
          echo "" >> SECURITY_SUMMARY.md
        done
        
        echo "" >> SECURITY_SUMMARY.md
        echo "## 🔗 Resources" >> SECURITY_SUMMARY.md
        echo "- [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> SECURITY_SUMMARY.md
        echo "- [Security Policy](https://github.com/${{ github.repository }}/security/policy)" >> SECURITY_SUMMARY.md
        echo "- [Security Advisories](https://github.com/${{ github.repository }}/security/advisories)" >> SECURITY_SUMMARY.md
    
    - name: Create security issues (if requested)
      if: github.event.inputs.create_issues == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create issues for critical findings
        if [ -f security-results/dependency-scan-results/audit-results.json ]; then
          echo "Processing dependency vulnerabilities for issue creation..."
          # Process audit results and create issues
        fi
        
        if [ -f security-results/sast-results/semgrep-results.json ]; then
          echo "Processing SAST findings for issue creation..."
          # Process SAST results and create issues
        fi
    
    - name: Upload comprehensive security summary
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-security-summary
        path: SECURITY_SUMMARY.md
        retention-days: 90
    
    - name: Add security summary to job
      run: |
        echo "## 🔒 Security Scan Complete" >> $GITHUB_STEP_SUMMARY
        cat SECURITY_SUMMARY.md >> $GITHUB_STEP_SUMMARY