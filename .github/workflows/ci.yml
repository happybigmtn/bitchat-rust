name: BitCraps CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust checks and tests
  rust-checks:
    name: Rust Checks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build documentation
      run: cargo doc --no-deps

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  # Android build
  android-build:
    name: Android Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android, armv7-linux-androideabi, x86_64-linux-android
    
    - name: Install cargo-ndk
      run: cargo install cargo-ndk
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
    
    - name: Build Rust library for Android
      run: |
        cd android
        cargo ndk -t arm64-v8a -t armeabi-v7a -t x86_64 build --release
    
    - name: Build Android app
      run: |
        cd android
        chmod +x gradlew
        ./gradlew build
    
    - name: Run Android tests
      run: |
        cd android
        ./gradlew test
    
    - name: Upload Android APK
      uses: actions/upload-artifact@v3
      with:
        name: android-debug-apk
        path: android/app/build/outputs/apk/debug/*.apk

  # iOS build (macOS only)
  ios-build:
    name: iOS Build
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios, x86_64-apple-ios
    
    - name: Install cargo-lipo
      run: cargo install cargo-lipo
    
    - name: Build Rust library for iOS
      run: cargo lipo --release
    
    - name: Build iOS app
      run: |
        cd ios
        xcodebuild -project BitCraps.xcodeproj \
                   -scheme BitCraps \
                   -sdk iphonesimulator \
                   -configuration Debug \
                   build
    
    - name: Run iOS tests
      run: |
        cd ios
        xcodebuild test -project BitCraps.xcodeproj \
                        -scheme BitCraps \
                        -sdk iphonesimulator \
                        -destination 'platform=iOS Simulator,name=iPhone 14'

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate code coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        fail_ci_if_error: true

  # Benchmark tests (only on master/main push)
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run benchmarks
      run: cargo bench --features benchmarks
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion

  # Release build
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release
      run: cargo build --release
    
    - name: Create release archive
      run: |
        tar czf bitcraps-linux-x64.tar.gz -C target/release bitcraps
    
    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-linux-x64
        path: bitcraps-linux-x64.tar.gz