# BitCraps Staging Configuration
# Configuration for staging/testing environment

[app]
name = "BitCraps"
version = "0.1.0-staging"
environment = "Staging"
data_dir = "/data"
log_level = "debug"  # More verbose logging for debugging
worker_threads = 8
enable_tui = false
instance_id = "${POD_NAME:-bitcraps-staging}"
node_name = "${NODE_NAME:-staging-node}"

[network]
listen_address = "0.0.0.0"
listen_port = 8334
max_connections = 1000  # Lower limits for staging
connection_timeout = { secs = 30, nanos = 0 }
keepalive_interval = { secs = 60, nanos = 0 }
max_packet_size = 262144  # 256KB
enable_bluetooth = true
enable_tcp = true
enable_compression = true
compression_level = 3  # Lower compression for faster debugging
mtu_discovery = true
bind_to_device = false
reuse_port = true
tcp_nodelay = true

# Staging-specific networking
health_check_port = 8080
metrics_port = 9091
debug_port = 9092  # Additional debug port

# Relaxed rate limiting for testing
rate_limiting = {
  enabled = false,  # Disabled for easier testing
  requests_per_minute = 1000,
  burst_size = 100,
  cleanup_interval = { secs = 60, nanos = 0 }
}

[consensus]
min_participants = 2  # Lower for testing
max_participants = 100
proposal_timeout = { secs = 10, nanos = 0 }  # Shorter for faster testing
voting_timeout = { secs = 5, nanos = 0 }
finality_threshold = 0.67
byzantine_tolerance = 0.33
enable_fast_path = true
checkpoint_interval = 100
batch_size = 10  # Smaller batches for testing
max_pending_proposals = 100

# Testing features
slashing_enabled = false  # Disabled for testing
reputation_system = false
witness_requirements = 1

[database]
url = "postgresql://bitcraps:${POSTGRES_PASSWORD}@bitcraps-postgresql:5432/bitcraps_staging"
max_connections = 20  # Smaller pool
min_connections = 2
connection_timeout = { secs = 10, nanos = 0 }
idle_timeout = { secs = 300, nanos = 0 }
max_lifetime = { secs = 1800, nanos = 0 }
enable_wal = true
synchronous_commit = "off"  # Better performance for testing
checkpoint_interval = { secs = 60, nanos = 0 }
backup_dir = "/data/backups"
backup_interval = { secs = 3600, nanos = 0 }  # Hourly

# Staging database settings
vacuum_settings = {
  autovacuum = true,
  vacuum_cost_limit = 1000,
  vacuum_cost_delay = 20
}

# Single database for staging (no replica)
read_replica_url = ""
read_write_split = false
read_preference = "primary"

[security]
pow_difficulty = 8  # Much lower for testing
key_rotation_interval = { secs = 86400, nanos = 0 }  # Daily
session_timeout = { secs = 7200, nanos = 0 }  # Longer for testing
max_session_count = 1000
enable_rate_limiting = false  # Disabled for testing
rate_limit_requests = 1000
rate_limit_window = { secs = 60, nanos = 0 }
enable_tls = false  # Disabled for easier debugging
tls_version = "1.2"
cipher_suites = []

# Relaxed security for testing
enable_2fa = false
password_policy = {
  min_length = 6,
  require_uppercase = false,
  require_lowercase = false,
  require_numbers = false,
  require_symbols = false
}
brute_force_protection = {
  max_attempts = 10,
  lockout_duration = { secs = 300, nanos = 0 }  # 5 minutes
}

# Basic audit logging
audit_logging = {
  enabled = true,
  log_all_access = false,
  log_admin_actions = true,
  retention_days = 7
}

[monitoring]
enable_metrics = true
metrics_port = 9091
metrics_path = "/metrics"
enable_tracing = true
tracing_sample_rate = 1.0  # 100% sampling for debugging
health_check_interval = { secs = 30, nanos = 0 }
log_retention_days = 7
metric_retention_days = 30

# Debug-friendly APM
apm = {
  enabled = true,
  service_name = "bitcraps-staging",
  environment = "staging",
  sample_rate = 1.0  # Full sampling
}

# All metrics enabled for debugging
custom_metrics = {
  active_games = true,
  transaction_rate = true,
  consensus_latency = true,
  error_rates = true,
  resource_usage = true
}

[game]
min_bet = 1
max_bet = 10000  # Lower limits for testing
max_players_per_game = 20
game_timeout = { secs = 300, nanos = 0 }  # 5 minutes
auto_resolve_timeout = { secs = 60, nanos = 0 }
enable_side_bets = true
house_edge = 0.0136
max_concurrent_games = 100

# Testing-friendly game settings
provably_fair = true
random_seed_sources = ["hardware"]  # Simpler for testing
game_state_verification = false  # Disabled for performance
replay_system = true

[treasury]
initial_supply = 1000000000  # 1 billion tokens for testing
treasury_address = "${TREASURY_ADDRESS}"
rake_percentage = 0.02  # 2% for testing
min_reserve = 1000000  # 1 million token minimum
max_exposure = 10000000  # 10 million token maximum
rebalance_interval = { secs = 3600, nanos = 0 }  # Hourly

# Simplified risk management
risk_management = {
  max_bet_percentage = 0.05,  # Higher percentage for testing
  volatility_adjustment = false,
  liquidity_buffer = 0.1
}

# Testing token economics
staking_rewards = {
  enabled = false,  # Disabled for testing
  annual_rate = 0.1,
  min_stake_period = { secs = 86400, nanos = 0 }  # 1 day
}

[caching]
redis_url = "redis://:${REDIS_PASSWORD}@bitcraps-redis:6379/1"  # Different DB
max_connections = 20
connection_timeout = { secs = 5, nanos = 0 }
default_ttl = { secs = 1800, nanos = 0 }  # 30 minutes

# Shorter TTLs for testing
strategies = {
  game_state = { ttl = { secs = 60, nanos = 0 } },
  user_sessions = { ttl = { secs = 300, nanos = 0 } },
  consensus_cache = { ttl = { secs = 30, nanos = 0 } },
  leaderboards = { ttl = { secs = 120, nanos = 0 } }
}

[performance]
# Smaller limits for staging
max_memory_usage = "2GB"
memory_pool_size = "512MB"
garbage_collection_threshold = 0.7

# Smaller thread pools
thread_pools = {
  consensus = 4,
  networking = 8,
  database = 2,
  background = 2
}

# Full performance tracking
performance_tracking = {
  enabled = true,
  sample_rate = 1.0,  # 100% sampling
  slow_query_threshold = { secs = 0, nanos = 500000000 }  # 500ms
}

[backup]
enable_continuous_backup = true
backup_schedule = "0 3 * * *"  # Daily at 3 AM
incremental_interval = { secs = 7200, nanos = 0 }  # Every 2 hours
retention_policy = {
  daily = 7,   # Keep 7 daily backups
  weekly = 4,  # Keep 4 weekly backups
  monthly = 3  # Keep 3 monthly backups
}

# Single backup destination
backup_destinations = [
  {
    type = "s3",
    bucket = "bitcraps-staging-backups",
    encryption = true
  }
]

[compliance]
# Simplified compliance for staging
gdpr = {
  enabled = false,  # Disabled for testing
  data_retention_days = 30,
  anonymization_delay = { secs = 3600, nanos = 0 },
  audit_trail = false
}

# No financial compliance in staging
kyc_aml = {
  enabled = false,
  verification_required = false,
  transaction_limits = {
    daily = 100000,
    monthly = 1000000
  }
}

# Test gaming compliance
gaming_compliance = {
  jurisdiction = "test",
  license_number = "TEST-123",
  responsible_gaming = false,
  age_verification = false
}

[alerting]
# Only critical alerts for staging
critical_alerts = {
  consensus_failure = true,
  database_connection_loss = true,
  high_error_rate = false,  # Too noisy in testing
  security_breach_attempt = false
}

# Staging alert destinations
slack_webhook = "${STAGING_SLACK_WEBHOOK_URL}"
email_alerts = ["staging-ops@bitcraps.io"]
sms_alerts = []  # No SMS alerts for staging

# Relaxed thresholds
thresholds = {
  error_rate = 0.2,  # 20% error rate (higher tolerance)
  response_time_p99 = { secs = 5, nanos = 0 },
  cpu_usage = 0.9,
  memory_usage = 0.95,
  disk_usage = 0.9
}

[feature_flags]
# All features enabled for testing
features = {
  new_consensus_algorithm = true,  # Test new features here
  advanced_betting_options = true,
  social_features = true,
  mobile_push_notifications = false,  # Disabled in staging
  realtime_analytics = true,
  automated_tournaments = true
}

# Full A/B testing in staging
ab_testing = {
  enabled = true,
  default_allocation = 0.5,  # 50/50 split for testing
  test_allocation = 0.5
}

[debug]
# Debug-specific settings
enable_debug_endpoints = true
enable_profiling = true
enable_memory_debugging = true
enable_query_logging = true
enable_request_tracing = true

# Test data generation
generate_test_data = true
test_users_count = 100
test_games_count = 50

# Chaos engineering for testing
chaos_engineering = {
  enabled = false,  # Enable manually when needed
  failure_rate = 0.01,  # 1% failure injection
  latency_injection = true,
  memory_pressure = false
}
