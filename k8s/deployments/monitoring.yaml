apiVersion: apps/v1
kind: Deployment
metadata:
  name: bitcraps-monitoring
  namespace: bitcraps
  labels:
    app.kubernetes.io/name: bitcraps
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: kubernetes
spec:
  replicas: 1  # Single instance for monitoring
  strategy:
    type: Recreate  # Recreate to avoid conflicts with persistent storage
  selector:
    matchLabels:
      app.kubernetes.io/name: bitcraps
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bitcraps
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/version: "0.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: bitcraps-monitoring
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      imagePullSecrets:
        - name: bitcraps-registry-secret
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        ports:
        - name: prometheus
          containerPort: 9090
          protocol: TCP
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=15d'
          - '--storage.tsdb.retention.size=50GB'
          - '--web.enable-lifecycle'
          - '--web.route-prefix=/'
          - '--web.external-url=http://localhost:9090'
          - '--log.level=info'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-data
          mountPath: /prometheus
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: prometheus
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: prometheus
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
            ephemeral-storage: 1Gi
          limits:
            cpu: 2
            memory: 8Gi
            ephemeral-storage: 5Gi
      - name: grafana
        image: grafana/grafana:10.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false  # Grafana needs write access
          capabilities:
            drop:
              - ALL
        ports:
        - name: grafana
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: bitcraps-monitoring-secrets
              key: grafana-admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bitcraps-monitoring-secrets
              key: grafana-admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        - name: GF_SERVER_ROOT_URL
          value: "http://localhost:3000"
        - name: GF_DATABASE_TYPE
          value: "sqlite3"
        - name: GF_DATABASE_PATH
          value: "/var/lib/grafana/grafana.db"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana
          readOnly: true
        livenessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
            ephemeral-storage: 1Gi
          limits:
            cpu: 1
            memory: 2Gi
            ephemeral-storage: 5Gi
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        ports:
        - name: alertmanager
          containerPort: 9093
          protocol: TCP
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--web.external-url=http://localhost:9093'
          - '--log.level=info'
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
          readOnly: true
        - name: alertmanager-data
          mountPath: /alertmanager
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: alertmanager
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: alertmanager
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
            ephemeral-storage: 1Gi
          limits:
            cpu: 500m
            memory: 1Gi
            ephemeral-storage: 2Gi
      volumes:
      - name: prometheus-config
        configMap:
          name: bitcraps-app-config
          items:
          - key: prometheus.yml
            path: prometheus.yml
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: bitcraps-prometheus-data
      - name: grafana-data
        persistentVolumeClaim:
          claimName: bitcraps-grafana-data
      - name: grafana-config
        configMap:
          name: bitcraps-grafana-config
      - name: alertmanager-config
        configMap:
          name: bitcraps-alertmanager-config
      - name: alertmanager-data
        persistentVolumeClaim:
          claimName: bitcraps-alertmanager-data
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      dnsPolicy: ClusterFirst

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bitcraps-monitoring
  namespace: bitcraps
  labels:
    app.kubernetes.io/name: bitcraps
    app.kubernetes.io/component: monitoring
  annotations:
    description: "Service account for BitCraps monitoring stack"
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bitcraps-monitoring
  labels:
    app.kubernetes.io/name: bitcraps
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bitcraps-monitoring
  labels:
    app.kubernetes.io/name: bitcraps
    app.kubernetes.io/component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bitcraps-monitoring
subjects:
- kind: ServiceAccount
  name: bitcraps-monitoring
  namespace: bitcraps